@Library('csm-shared-library') _

pipeline {
    agent {
        docker {
            label "metal-gcp-builder"
            image "arti.dev.cray.com/dstbuildenv-docker-master-local/cray-alpine3_build_environment:latest"
            args "-u root"
        }
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        timestamps()
    }
    environment {
        NAME = "cray-k8s-liveness"
        DESCRIPTION = "Library for creating and referncing timestamps to determine if a piece of code is running or not, from a k8s perspective"
        VERSION = sh(returnStdout: true, script: "head -1 .version").trim()
        IS_STABLE = getBuildIsStable()
    }

    stages {
        stage("Install Necessary Tools") {
            steps {
                sh """
                    apk add --no-cache --virtual .build-deps g++ python3-dev libffi-dev openssl-dev py3-pip bash curl make
                    apk add --no-cache --update python3 && pip3 install --upgrade pip setuptools
                    pip3 install wheel
                """
            }
        }

        stage("Clone cms_meta_tools repo") {
            steps { 
                withCredentials([gitUsernamePassword(credentialsId: 'jenkins-algol60-cray-hpe-github-integration')]) {
                    sh 'git clone --depth 1 --no-single-branch https://github.com/Cray-HPE/cms-meta-tools.git ./cms_meta_tools'
                }            
            }
        }

        stage("runBuildPrep") {
            steps { sh "make runbuildprep" }
        }

        stage("Lint") {
            steps { sh "make lint" }
        }
                
        stage('Build Package') {
            steps { sh "make pymod_build" }
        }

        stage('Unit Tests') {
            steps { sh "make pymod_test" }
        }
        
        stage('Publish') {
            steps {
                publishCsmPythonModules(module: env.NAME, isStable: env.IS_STABLE)
            }
        }
    }
}
