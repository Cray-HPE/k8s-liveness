@Library('cms-meta-tools') _
@Library('csm-shared-library') __

pipeline {
    agent {
        docker {
            label "metal-gcp-builder"
            image "arti.dev.cray.com/dstbuildenv-docker-master-local/cray-sle15sp3_build_environment:latest"
        }
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        timestamps()
    }
    environment {
        NAME = "cray-k8s-liveness"
        PYMOD_NAME = "liveness"
        DESCRIPTION = "Library for creating and referncing timestamps to determine if a piece of code is running or not, from a k8s perspective"
        IS_STABLE = getBuildIsStable()
    }

    stages {
        stage("Clone cms_meta_tools repo") {
            steps {
                // This function is defined in cms-meta-tools:vars/cloneCMSMetaTools.groovy
                cloneCMSMetaTools()
            }
        }

        stage("Set Versions") {
            steps {
                // This function is defined in cms-meta-tools:vars/setVersionFiles.groovy
                setVersionFiles()
            }
        }

        stage("runBuildPrep") {
             withCredentials([usernamePassword(credentialsId: 'artifactory-algol60-readonly', passwordVariable: 'ARTIFACTORY_PASSWORD', usernameVariable: 'ARTIFACTORY_USERNAME')]) {
                steps { sh "make runbuildprep" }
                }
        }

        stage("Lint") {
            steps { sh "make lint" }
        }
         
        stage('Prepare for Build') {
            steps { sh "make pymod_prepare" }
        }

        stage('Build Package') {
            steps { sh "make pymod_build" }
        }

        stage('Unit Tests') {
            steps { sh "make pymod_test" }
        }
        
        stage('Publish') {
            steps {
                publishCsmPythonModules(module: env.PYMOD_NAME, isStable: env.IS_STABLE)
            }
        }
    }
}
