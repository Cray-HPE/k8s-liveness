/*
 *
 *  MIT License
 *
 *  (C) Copyright 2021-2024 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('cms-meta-tools') _
@Library('csm-shared-library') __

def pyImage = 'artifactory.algol60.net/csm-docker/stable/csm-docker-sle-python'

def getRpmName(packageName, pythonVersion) {
    if (pythonVersion == "3.6") {
        return "python3-${packageName}"
    }
    def pythonVersionParts = pythonVersion.tokenize('.')
    def pyMajor = "${pythonVersionParts[0]}"
    def pyMinor = "${pythonVersionParts[1]}"
    return "python${pyMajor}${pyMinor}-${packageName}"
}

pipeline {
    agent {
        label "metal-gcp-builder"
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        disableConcurrentBuilds()
        timeout(time: 90, unit: 'MINUTES')
        timestamps()
    }
    environment {
        NAME = "cray-k8s-liveness"
        PYMOD_NAME = "liveness"
        DESCRIPTION = "Library for creating and referencing timestamps to determine if a piece of code is running or not, from a k8s perspective"
        IS_STABLE = getBuildIsStable()
        RPM_ARCH = "noarch"
        RPM_OS = "noos"
        PY_VERSION = "3.6"
        BUILD_RELDIR = "dist/rpmbuild/${env.RPM_ARCH}/${env.PY_VERSION}"
        RPM_NAME = getRpmName(env.PYMOD_NAME, env.PY_VERSION)
    }

    stages {
        stage("Clone cms_meta_tools repo") {
            steps {
                // This function is defined in cms-meta-tools:vars/cloneCMSMetaTools.groovy
                cloneCMSMetaTools()
            }
        }

        stage("Set Versions") {
            steps {
                // This function is defined in cms-meta-tools:vars/setVersionFiles.groovy
                setVersionFiles()
            }
        }

        stage("runBuildPrep") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'artifactory-algol60-readonly', passwordVariable: 'ARTIFACTORY_PASSWORD', usernameVariable: 'ARTIFACTORY_USERNAME')]) {		
		    sh "make runbuildprep"
		}
            }
        }

        stage("Lint") {
            steps { sh "make lint" }
        }

        stage("Build") {
            agent {
                docker {
                    args "-v /home/jenkins/.ssh:/home/jenkins/.ssh -v /home/jenkins/.netrc:/home/jenkins/.netrc"
                    reuseNode true
                    image "${pyImage}:${env.PY_VERSION}"
                }
            }
            stages {
                stage("Build Python Package") {
                    steps { sh "make pymod" }
                }

                stage("Add build metadata to RPM spec file") {
                    environment {
                        BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
                    }
                    steps {
                        echo "RPM build metadata is ${env.BUILD_METADATA}"
                        runLibraryScript("addRpmMetaData.sh", "${env.WORKSPACE}/${env.NAME}.spec")
                    }
                }

                stage("Build RPM") {
                    environment {
                        BUILD_DIR = "${env.WORKSPACE}/${env.BUILD_RELDIR}"
                    }
                    steps { sh "make rpm" }
                }
            }
        }

        stage('Publish') {
            parallel {
                stage('Publish RPMs') {
                    steps {
                        publishCsmRpms(
                            arch: env.RPM_ARCH,
                            isStable: env.IS_STABLE,
                            component: env.RPM_NAME,
                            os: env.RPM_OS,
                            pattern: "${env.BUILD_RELDIR}/RPMS/${env.RPM_ARCH}/*.rpm",
                        )
                        publishCsmRpms(
                            arch: "src",
                            component: env.RPM_NAME,
                            isStable: env.IS_STABLE,
                            os: env.RPM_OS,
                            pattern: "${env.BUILD_RELDIR}/SRPMS/*.rpm",
                        )
                    }
                }
                stage ('Publish Python package') {
                    steps {
                        publishCsmPythonModules(module: env.PYMOD_NAME, isStable: env.IS_STABLE)
                    }
                }
            }
        }
    }
}
